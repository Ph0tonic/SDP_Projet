package ch.epfl.sdp.database.dao

import android.util.Log
import androidx.lifecycle.MutableLiveData
import ch.epfl.sdp.database.data.SearchGroupData
import ch.epfl.sdp.database.data.UserData
import com.google.firebase.database.*
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import timber.log.Timber

class FirebaseGroupDao : SearchGroupDao {
    private var database: FirebaseDatabase = Firebase.database

    private val groups: MutableLiveData<List<SearchGroupData>> = MutableLiveData(mutableListOf())
    private val watchedGroupsById: MutableMap<String, MutableLiveData<SearchGroupData>> = mutableMapOf()

    private val groupOperators: MutableMap<String, MutableLiveData<Set<UserData>>> = mutableMapOf()
    private val groupRescuers: MutableMap<String, MutableLiveData<Set<UserData>>> = mutableMapOf()

    override fun getGroups(): MutableLiveData<List<SearchGroupData>> {
        val myRef = database.getReference("search_groups")
        myRef.addValueEventListener(object : ValueEventListener {
            override fun onDataChange(dataSnapshot: DataSnapshot) {
                groups.value = (dataSnapshot.children.map { c ->
                    // Get group data (without key)
                    val group = c.getValue(SearchGroupData::class.java)
                    // Retrieve group key generated by google and use it
                    group?.uuid = c.key
                    group!!
                })
            }

            override fun onCancelled(error: DatabaseError) {
                // Failed to read value
                Timber.w("Failed to read value.")
            }
        })
        return groups
    }

    override fun getGroupById(groupId: String): MutableLiveData<SearchGroupData> {
        if (!watchedGroupsById.containsKey(groupId)) {
            val myRef = database.getReference("search_groups/$groupId")
            watchedGroupsById[groupId] = MutableLiveData()
            //TODO change to childEventListener ?
            myRef.addValueEventListener(object : ValueEventListener {
                override fun onDataChange(dataSnapshot: DataSnapshot) {
                    val group = dataSnapshot.getValue(SearchGroupData::class.java)
                    group?.uuid = dataSnapshot.key
                    watchedGroupsById[groupId]!!.value = group
                }

                override fun onCancelled(error: DatabaseError) {
                    Timber.w("Failed to read group from firebase.")
                }
            })
        }
        return watchedGroupsById[groupId]!!
    }

    /**
     * Creates a group with the given data.
     * The uuid of the searchgroup data will be overridden by an automatically generated one.
     */
    override fun createGroup(searchGroupData: SearchGroupData) {
        val myRef = database.getReference("search_groups")
        myRef.push().setValue(searchGroupData)
    }

    override fun updateGroup(searchGroupData: SearchGroupData) {
        val myRef = database.getReference("search_groups/${searchGroupData.uuid}")
        myRef.setValue(searchGroupData)
    }

    //TODO refactor code, this is very similar to getRescuersOfGroup()
    override fun getOperatorsOfGroup(groupId: String): MutableLiveData<Set<UserData>> {
        if (!groupOperators.containsKey(groupId)) {
            //Initialise data
            val myRef = database.getReference("operators/$groupId")
            groupOperators[groupId] = MutableLiveData(setOf())

            myRef.addChildEventListener(object : ChildEventListener {
                override fun onCancelled(p0: DatabaseError) {
                    Timber.w("Failed to read value.")
                }
                override fun onChildMoved(p0: DataSnapshot, p1: String?) {}
                override fun onChildChanged(p0: DataSnapshot, p1: String?) {
                    TODO("An operator has changed, no action implemented")
                }
                override fun onChildAdded(dataSnapshot: DataSnapshot, p1: String?) {
                    val user = dataSnapshot.getValue(UserData::class.java)!!
                    user.googleId = dataSnapshot.key!!
                    groupOperators[groupId]!!.value = groupOperators[groupId]!!.value!!.plus(user)
                }
                override fun onChildRemoved(dataSnapshot: DataSnapshot) {
                    val user = dataSnapshot.getValue(UserData::class.java)!!
                    user.email = dataSnapshot.key!!
                    groupOperators[groupId]!!.value = groupOperators[groupId]!!.value!!.minus(user)
                }
            })
        }
        return groupOperators[groupId]!!
    }

    //TODO refactor code, this is very similar to getOperatorsOfGroup()
    override fun getRescuersOfGroup(groupId: String): MutableLiveData<Set<UserData>> {
        Log.w("FIREBASE","get rescuers called")
        if (!groupRescuers.containsKey(groupId)) {
            //Initialise data
            val myRef = database.getReference("rescuers/$groupId")
            groupRescuers[groupId] = MutableLiveData(setOf())

            myRef.addChildEventListener(object : ChildEventListener {
                override fun onCancelled(p0: DatabaseError) {
                    Timber.w("Failed to read value.")
                }
                override fun onChildMoved(p0: DataSnapshot, p1: String?) {}
                override fun onChildChanged(p0: DataSnapshot, p1: String?) {
                    TODO("A rescuer has changed, no action implemented")
                }
                override fun onChildAdded(dataSnapshot: DataSnapshot, p1: String?) {
                    val user = dataSnapshot.getValue(UserData::class.java)!!
                    user.googleId = dataSnapshot.key!!
                    groupRescuers[groupId]!!.value = groupRescuers[groupId]!!.value!!.plus(user)
                }
                override fun onChildRemoved(dataSnapshot: DataSnapshot) {
                    val user = dataSnapshot.getValue(UserData::class.java)!!
                    user.email = dataSnapshot.key!!
                    groupRescuers[groupId]!!.value = groupRescuers[groupId]!!.value!!.minus(user)
                }
            })
        }
        return groupRescuers[groupId]!!
    }
}